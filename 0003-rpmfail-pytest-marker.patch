diff --git a/tests/integration/test_cli.py b/tests/integration/test_cli.py
index 0bc8902..1bdd400 100644
--- a/tests/integration/test_cli.py
+++ b/tests/integration/test_cli.py
@@ -17,6 +17,7 @@ def test_pipenv_where(PipenvInstance, pypi_secure):
         assert normalize_drive(p.path) in p.pipenv('--where').out
 
 
+@pytest.mark.rpmfail
 @pytest.mark.cli
 def test_pipenv_venv(PipenvInstance):
     with PipenvInstance() as p:
@@ -39,6 +40,7 @@ def test_pipenv_support(PipenvInstance):
         assert p.pipenv('--support').out
 
 
+@pytest.mark.rpmfail
 @pytest.mark.cli
 def test_pipenv_rm(PipenvInstance):
     with PipenvInstance() as p:
@@ -50,6 +52,7 @@ def test_pipenv_rm(PipenvInstance):
         assert not os.path.isdir(venv_path)
 
 
+@pytest.mark.rpmfail
 @pytest.mark.cli
 def test_pipenv_graph(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
@@ -59,6 +62,7 @@ def test_pipenv_graph(PipenvInstance, pypi):
         assert 'requests' in p.pipenv('graph --json-tree').out
 
 
+@pytest.mark.rpmfail
 @pytest.mark.cli
 def test_pipenv_graph_reverse(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
diff --git a/tests/integration/test_dot_venv.py b/tests/integration/test_dot_venv.py
index e545d01..866a337 100644
--- a/tests/integration/test_dot_venv.py
+++ b/tests/integration/test_dot_venv.py
@@ -9,6 +9,7 @@ import pytest
 from .fixtures.plugin import pypi
 
 
+@pytest.mark.rpmfail
 @pytest.mark.dotvenv
 def test_venv_in_project(PipenvInstance, pypi):
     with temp_environ():
@@ -19,6 +20,7 @@ def test_venv_in_project(PipenvInstance, pypi):
             assert normalize_drive(p.path) in p.pipenv('--venv').out
 
 
+@pytest.mark.rpmfail
 @pytest.mark.dotvenv
 def test_venv_at_project_root(PipenvInstance):
     with temp_environ():
@@ -34,6 +36,7 @@ def test_venv_at_project_root(PipenvInstance):
             assert normalize_drive(p.path) in p.pipenv('--venv').out
 
 
+@pytest.mark.rpmfail
 @pytest.mark.dotvenv
 def test_reuse_previous_venv(PipenvInstance, pypi):
     with PipenvInstance(chdir=True, pypi=pypi) as p:
diff --git a/tests/integration/test_install_basic.py b/tests/integration/test_install_basic.py
index 47670df..7536b35 100644
--- a/tests/integration/test_install_basic.py
+++ b/tests/integration/test_install_basic.py
@@ -31,7 +31,7 @@ def test_basic_setup(PipenvInstance, pypi):
 
 
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_basic_install(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         c = p.pipenv('install requests')
@@ -44,8 +44,8 @@ def test_basic_install(PipenvInstance, pypi):
         assert 'certifi' in p.lockfile['default']
 
 
+@pytest.mark.rpmfail
 @pytest.mark.install
-@flaky
 def test_mirror_install(PipenvInstance, pypi):
     with temp_environ(), PipenvInstance(chdir=True) as p:
         mirror_url = os.environ.pop('PIPENV_TEST_INDEX', "https://pypi.python.org/simple")
@@ -93,7 +93,7 @@ def test_complex_lock(PipenvInstance, pypi):
 
 @pytest.mark.dev
 @pytest.mark.run
-@flaky
+@pytest.mark.rpmfail
 def test_basic_dev_install(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         c = p.pipenv('install requests --dev')
@@ -111,7 +111,7 @@ def test_basic_dev_install(PipenvInstance, pypi):
 
 @pytest.mark.dev
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_install_without_dev(PipenvInstance, pypi):
     """Ensure that running `pipenv install` doesn't install dev packages"""
     with PipenvInstance(pypi=pypi, chdir=True) as p:
@@ -137,7 +137,7 @@ pytz = "*"
 
 
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_install_without_dev_section(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         with open(p.pipfile_path, 'w') as f:
@@ -158,7 +158,7 @@ six = "*"
 
 @pytest.mark.extras
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_extras_install(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi, chdir=True) as p:
         c = p.pipenv('install requests[socks]')
@@ -175,7 +175,7 @@ def test_extras_install(PipenvInstance, pypi):
 
 @pytest.mark.install
 @pytest.mark.pin
-@flaky
+@pytest.mark.rpmfail
 def test_windows_pinned_pipfile(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         with open(p.pipfile_path, 'w') as f:
@@ -193,7 +193,7 @@ tablib = "<0.12"
 @pytest.mark.install
 @pytest.mark.resolver
 @pytest.mark.backup_resolver
-@flaky
+@pytest.mark.rpmfail
 def test_backup_resolver(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         with open(p.pipfile_path, 'w') as f:
@@ -210,7 +210,7 @@ def test_backup_resolver(PipenvInstance, pypi):
 
 @pytest.mark.run
 @pytest.mark.alt
-@flaky
+@pytest.mark.rpmfail
 def test_alternative_version_specifier(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         with open(p.pipfile_path, 'w') as f:
@@ -300,6 +300,7 @@ tablib = "<0.12"
         assert 'requests' not in p.lockfile['default']
 
 
+@pytest.mark.rpmfail
 @pytest.mark.cli
 @pytest.mark.clean
 def test_clean_on_empty_venv(PipenvInstance, pypi):
@@ -308,6 +309,7 @@ def test_clean_on_empty_venv(PipenvInstance, pypi):
         assert c.return_code == 0
 
 
+@pytest.mark.rpmfail
 @pytest.mark.install
 def test_install_does_not_extrapolate_environ(PipenvInstance, pypi):
     """Ensure environment variables are not expanded in lock file.
@@ -365,6 +367,7 @@ def test_install_venv_project_directory(PipenvInstance, pypi):
             assert Path(project.virtualenv_location).joinpath('.project').exists()
 
 
+@pytest.mark.rpmfail
 @pytest.mark.deploy
 @pytest.mark.system
 def test_system_and_deploy_work(PipenvInstance, pypi):
diff --git a/tests/integration/test_install_markers.py b/tests/integration/test_install_markers.py
index 58f29f2..767d830 100644
--- a/tests/integration/test_install_markers.py
+++ b/tests/integration/test_install_markers.py
@@ -64,7 +64,7 @@ depends-on-marked-package = "*"
 @pytest.mark.run
 @pytest.mark.alt
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_specific_package_environment_markers(PipenvInstance, pypi):
 
     with PipenvInstance(pypi=pypi) as p:
@@ -86,7 +86,7 @@ requests = {version = "*", os_name = "== 'splashwear'"}
 
 
 @pytest.mark.markers
-@flaky
+@pytest.mark.rpmfail
 def test_top_level_overrides_environment_markers(PipenvInstance, pypi):
     """Top-level environment markers should take precedence.
     """
@@ -107,7 +107,7 @@ funcsigs = {version = "*", os_name = "== 'splashwear'"}
 
 @pytest.mark.markers
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_global_overrides_environment_markers(PipenvInstance, pypi):
     """Empty (unconditional) dependency should take precedence.
     If a dependency is specified without environment markers, it should
@@ -132,7 +132,7 @@ funcsigs = "*"
 
 @pytest.mark.lock
 @pytest.mark.complex
-@flaky
+@pytest.mark.rpmfail
 @py3_only
 @skip_py37
 def test_resolver_unique_markers(PipenvInstance, pypi):
@@ -156,7 +156,7 @@ def test_resolver_unique_markers(PipenvInstance, pypi):
 
 
 @pytest.mark.project
-@flaky
+@pytest.mark.rpmfail
 def test_environment_variable_value_does_not_change_hash(PipenvInstance, pypi):
     with PipenvInstance(chdir=True, pypi=pypi) as p:
         with temp_environ():
diff --git a/tests/integration/test_install_twists.py b/tests/integration/test_install_twists.py
index adce703..aa574da 100644
--- a/tests/integration/test_install_twists.py
+++ b/tests/integration/test_install_twists.py
@@ -74,7 +74,7 @@ def test_e_dot(PipenvInstance, pip_src_dir):
 
 
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_multiprocess_bug_and_install(PipenvInstance, pypi):
     with temp_environ():
         os.environ['PIPENV_MAX_SUBPROCESS'] = '2'
@@ -102,7 +102,7 @@ urllib3 = "*"
 
 @pytest.mark.sequential
 @pytest.mark.install
-@flaky
+@pytest.mark.rpmfail
 def test_sequential_mode(PipenvInstance, pypi):
 
     with PipenvInstance(pypi=pypi, chdir=True) as p:
@@ -126,6 +126,7 @@ pytz = "*"
         assert c.return_code == 0
 
 
+@pytest.mark.rpmfail
 @pytest.mark.install
 @pytest.mark.run
 def test_normalize_name_install(PipenvInstance, pypi):
@@ -159,7 +160,7 @@ Requests = "==2.14.0"   # Inline comment
 @pytest.mark.files
 @pytest.mark.resolver
 @pytest.mark.eggs
-@flaky
+@pytest.mark.rpmfail
 def test_local_package(PipenvInstance, pip_src_dir, pypi, testsroot):
     """This test ensures that local packages (directories with a setup.py)
     installed in editable mode have their dependencies resolved as well"""
@@ -180,7 +181,7 @@ def test_local_package(PipenvInstance, pip_src_dir, pypi, testsroot):
 
 
 @pytest.mark.files
-@flaky
+@pytest.mark.rpmfail
 def test_local_zipfiles(PipenvInstance, pypi, testsroot):
     file_name = 'tablib-0.12.1.tar.gz'
     # Not sure where travis/appveyor run tests from
@@ -205,7 +206,7 @@ def test_local_zipfiles(PipenvInstance, pypi, testsroot):
 
 
 @pytest.mark.files
-@flaky
+@pytest.mark.rpmfail
 def test_relative_paths(PipenvInstance, pypi, testsroot):
     file_name = 'tablib-0.12.1.tar.gz'
     source_path = os.path.abspath(os.path.join(testsroot, 'test_artifacts', file_name))
@@ -228,7 +229,7 @@ def test_relative_paths(PipenvInstance, pypi, testsroot):
 
 @pytest.mark.install
 @pytest.mark.local_file
-@flaky
+@pytest.mark.rpmfail
 def test_install_local_file_collision(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         target_package = 'alembic'
diff --git a/tests/integration/test_install_uri.py b/tests/integration/test_install_uri.py
index d27d690..7822ace 100644
--- a/tests/integration/test_install_uri.py
+++ b/tests/integration/test_install_uri.py
@@ -10,7 +10,7 @@ from .fixtures.plugin import pypi
 @pytest.mark.vcs
 @pytest.mark.install
 @pytest.mark.needs_internet
-@flaky
+@pytest.mark.rpmfail
 def test_basic_vcs_install(PipenvInstance, pip_src_dir, pypi):
     with PipenvInstance(pypi=pypi, chdir=True) as p:
         c = p.pipenv('install git+https://github.com/benjaminp/six.git@1.11.0#egg=six')
@@ -27,7 +27,7 @@ def test_basic_vcs_install(PipenvInstance, pip_src_dir, pypi):
 @pytest.mark.files
 @pytest.mark.urls
 @pytest.mark.needs_internet
-@flaky
+@pytest.mark.rpmfail
 def test_urls_work(PipenvInstance, pypi, pip_src_dir):
     with PipenvInstance(pypi=pypi) as p:
         c = p.pipenv('install https://github.com/divio/django-cms/archive/release/3.4.x.zip')
@@ -79,7 +79,7 @@ def test_local_vcs_urls_work(PipenvInstance, pypi):
 @pytest.mark.files
 @pytest.mark.urls
 @pytest.mark.needs_internet
-@flaky
+@pytest.mark.rpmfail
 def test_install_remote_requirements(PipenvInstance, pypi):
     with PipenvInstance(pypi=pypi) as p:
         # using a github hosted requirements.txt file
@@ -101,7 +101,7 @@ def test_install_remote_requirements(PipenvInstance, pypi):
 @pytest.mark.vcs
 @pytest.mark.install
 @pytest.mark.needs_internet
-@flaky
+@pytest.mark.rpmfail
 def test_editable_vcs_install(PipenvInstance, pip_src_dir, pypi):
     with PipenvInstance(pypi=pypi) as p:
         c = p.pipenv('install -e git+https://github.com/requests/requests.git#egg=requests')
@@ -120,7 +120,7 @@ def test_editable_vcs_install(PipenvInstance, pip_src_dir, pypi):
 @pytest.mark.vcs
 @pytest.mark.tablib
 @pytest.mark.needs_internet
-@flaky
+@pytest.mark.rpmfail
 def test_install_editable_git_tag(PipenvInstance, pip_src_dir, pypi):
     # This uses the real PyPI since we need Internet to access the Git
     # dependency anyway.
diff --git a/tests/integration/test_lock.py b/tests/integration/test_lock.py
index 95de475..366567d 100644
--- a/tests/integration/test_lock.py
+++ b/tests/integration/test_lock.py
@@ -26,6 +26,7 @@ RandomWords = "*"
         assert p.lockfile['default']['randomwords']['version'] == '==0.2.1'
 
 
+@pytest.mark.rpmfail
 @pytest.mark.lock
 @pytest.mark.requirements
 def test_lock_requirements_file(PipenvInstance, pypi):
@@ -56,6 +57,7 @@ flask = "==0.12.2"
             assert req in d.out
 
 
+@pytest.mark.rpmfail
 @pytest.mark.lock
 def test_lock_keep_outdated(PipenvInstance, pypi):
 
@@ -128,6 +130,7 @@ requests = {git = "https://github.com/requests/requests.git"}
         assert 'python_dateutil' not in lock['develop']
 
 
+@pytest.mark.rpmfail
 @pytest.mark.lock
 @pytest.mark.requirements
 def test_lock_with_prereleases(PipenvInstance, pypi):
@@ -152,7 +155,7 @@ allow_prereleases = true
 @pytest.mark.complex
 @pytest.mark.maya
 @pytest.mark.needs_internet
-@flaky
+@pytest.mark.rpmfail
 def test_complex_deps_lock_and_install_properly(PipenvInstance, pip_src_dir, pypi):
     # This uses the real PyPI because Maya has too many dependencies...
     with PipenvInstance(chdir=True, pypi=pypi) as p:
@@ -295,6 +298,7 @@ requests = "*"
         assert '--extra-index-url {}'.format(mirror_url) not in c.out.strip()
 
 
+@pytest.mark.rpmfail
 @pytest.mark.install
 @pytest.mark.index
 def test_lock_updated_source(PipenvInstance, pypi):
diff --git a/tests/integration/test_pipenv.py b/tests/integration/test_pipenv.py
index 75a0a9d..668c3ad 100644
--- a/tests/integration/test_pipenv.py
+++ b/tests/integration/test_pipenv.py
@@ -28,6 +28,7 @@ def test_code_import_manual(PipenvInstance):
         assert 'requests' in p.pipfile['packages']
 
 
+@pytest.mark.rpmfail
 @pytest.mark.lock
 @pytest.mark.deploy
 @pytest.mark.cli
diff --git a/tests/integration/test_project.py b/tests/integration/test_project.py
index 5deccc8..2ec08ef 100644
--- a/tests/integration/test_project.py
+++ b/tests/integration/test_project.py
@@ -29,6 +29,7 @@ pytz = "*"
             assert 'localhost:5000' not in str(pipfile.load(p.pipfile_path))
 
 
+@pytest.mark.rpmfail
 @pytest.mark.project
 @pytest.mark.sources
 @pytest.mark.parametrize('lock_first', [True, False])
@@ -76,6 +77,7 @@ six = {{version = "*", index = "pypi"}}
             assert sorted(source.items()) == sorted(project.find_source(url).items())
 
 
+@pytest.mark.rpmfail
 @pytest.mark.install
 @pytest.mark.project
 @pytest.mark.parametrize('newlines', [u'\n', u'\r\n'])
@@ -113,6 +115,7 @@ def test_maintain_file_line_endings(PipenvInstance, pypi, newlines):
             # message because of  https://github.com/pytest-dev/pytest/issues/3443
 
 
+@pytest.mark.rpmfail
 @pytest.mark.project
 @pytest.mark.sources
 def test_many_indexes(PipenvInstance, pypi):
diff --git a/tests/integration/test_run.py b/tests/integration/test_run.py
index 72f1059..14b9172 100644
--- a/tests/integration/test_run.py
+++ b/tests/integration/test_run.py
@@ -5,6 +5,7 @@ from pipenv.project import Project
 import pytest
 
 
+@pytest.mark.rpmfail
 @pytest.mark.run
 @pytest.mark.dotenv
 def test_env(PipenvInstance):
@@ -17,6 +18,7 @@ def test_env(PipenvInstance):
         assert 'WORLD' in c.out
 
 
+@pytest.mark.rpmfail
 @pytest.mark.run
 def test_scripts(PipenvInstance):
     with PipenvInstance(chdir=True) as p:
diff --git a/tests/integration/test_sync.py b/tests/integration/test_sync.py
index 0799154..8fe62a8 100644
--- a/tests/integration/test_sync.py
+++ b/tests/integration/test_sync.py
@@ -20,6 +20,7 @@ def test_sync_error_without_lockfile(PipenvInstance, pypi):
         assert 'Pipfile.lock is missing!' in c.err
 
 
+@pytest.mark.rpmfail
 @pytest.mark.sync
 @pytest.mark.lock
 def test_mirror_lock_sync(PipenvInstance, pypi):
diff --git a/tests/integration/test_uninstall.py b/tests/integration/test_uninstall.py
index dffbdbc..fffe440 100644
--- a/tests/integration/test_uninstall.py
+++ b/tests/integration/test_uninstall.py
@@ -8,6 +8,7 @@ import pytest
 from .fixtures.plugin import pypi
 
 
+@pytest.mark.rpmfail
 @pytest.mark.run
 @pytest.mark.uninstall
 @pytest.mark.install
@@ -35,6 +36,7 @@ def test_uninstall(PipenvInstance, pypi):
         assert c.return_code > 0
 
 
+@pytest.mark.rpmfail
 @pytest.mark.run
 @pytest.mark.uninstall
 @pytest.mark.install
@@ -76,6 +78,7 @@ def test_mirror_uninstall(PipenvInstance, pypi):
         assert c.return_code > 0
 
 
+@pytest.mark.rpmfail
 @pytest.mark.files
 @pytest.mark.uninstall
 @pytest.mark.install
@@ -95,6 +98,7 @@ def test_uninstall_all_local_files(PipenvInstance, testsroot):
         assert 'tablib' not in p.pipfile['packages']
 
 
+@pytest.mark.rpmfail
 @pytest.mark.run
 @pytest.mark.uninstall
 @pytest.mark.install
@@ -129,6 +133,7 @@ def test_uninstall_all_dev(PipenvInstance, pypi):
         assert c.return_code == 0
 
 
+@pytest.mark.rpmfail
 @pytest.mark.uninstall
 @pytest.mark.run
 def test_normalize_name_uninstall(PipenvInstance, pypi):
diff --git a/tests/unit/test_utils.py b/tests/unit/test_utils.py
index 7fafdaa..6dc75f4 100644
--- a/tests/unit/test_utils.py
+++ b/tests/unit/test_utils.py
@@ -221,6 +221,7 @@ class TestUtils:
         assert pipenv.utils.is_valid_url(not_url) is False
 
     @pytest.mark.utils
+    @pytest.mark.rpmfail
     def test_download_file(self):
         url = "https://github.com/kennethreitz/pipenv/blob/master/README.rst"
         output = "test_download.rst"
@@ -269,6 +270,7 @@ twine = "*"
     def test_win_normalize_drive(self, input_path, expected):
         assert pipenv.utils.normalize_drive(input_path) == expected
 
+    @pytest.mark.rpmfail
     @pytest.mark.utils
     @pytest.mark.parametrize(
         'input_path, expected',
